declare
	grade char(1);
begin
	grade:=&g;
IF grade = 'A' THEN
	dbms_output.put_line('Excellent');
ELSIF grade = 'B' THEN
	dbms_output.put_line('Very Good');
ELSIF grade = 'C' THEN
	dbms_output.put_line('Good');
ELSIF grade = 'D' THEN
	dbms_output.put_line('Fair');
ELSIF grade = 'E' THEN
	dbms_output.put_line('Poor');
ELSE
	dbms_output.put_line('No such Grade');
END IF;
END;
/

Declare
	Insufficient_Balance Exception;
	Amount account.balance%type;
	TempAmount account.balance%type;
	AccountNo account.account_number%type;
Begin
	AccountNo := &AccountNumber;
	Amount := &Amount;
	select balance into TempAmount from account where account_number=AccountNo;
	TempAmount := TempAmount - Amount;
IF TempAmount >= 500 THEn
	update account set balance = TempAmount where account_number=AccountNo;
ELSE
	RAISE Insufficient_Balance;
END IF;
EXCEPTION
	when Insufficient_Balance Then
		dbms_output.put_line('Insufficient Balance');
	when others then
		dbms_output.put_line('Error');
END;
/

1.
Declare
	In_RollNo StudentTable.ROLLNO%type;
	Out_GPA StudentTable.GPA%type;
Begin
	In_RollNo := &RollNo;
	select GPA into Out_GPA from StudentTable where Rollno = In_RollNo;
	dbms_output.put_line(Out_GPA);
END;
/

create table StudentTable(RollNo number(2),GPA number(2,1));
insert into StudentTable values(1,5.8);
insert into StudentTable values(2,6.5);
insert into StudentTable values(3,3.4);
insert into StudentTable values(4,7.8);
insert into StudentTable values(5,9.5);

2.
Declare
	In_RollNo StudentTable.ROLLNO%type;
	Out_GPA StudentTable.GPA%type;
Begin
	In_RollNo := &RollNo;
	select GPA into Out_GPA from StudentTable where Rollno = In_RollNo;
	IF Out_GPA >= 0 and Out_GPA < 4 THEN
		dbms_output.put_line('F');
	ELSIF Out_GPA >= 4 and Out_GPA < 5 THEN
		dbms_output.put_line('E');
	ELSIF Out_GPA >= 5 and Out_GPA < 6 THEN
		dbms_output.put_line('D');
	ELSIF Out_GPA >= 6 and Out_GPA < 7 THEN
		dbms_output.put_line('C');
	ELSIF Out_GPA >= 7 and Out_GPA < 8 THEN
		dbms_output.put_line('B');
	ELSIF Out_GPA >= 8 and Out_GPA < 9 THEN
		dbms_output.put_line('A');
	ELSIF Out_GPA >= 9 and Out_GPA <= 10 THEN
		dbms_output.put_line('A+');
	ELSE
		dbms_output.put_line('hfdhewgb');
END IF;
END;
/
3.
declare
	DateOut DATE;
	DateIn DATE;
	NoOfDays number(3);
	Price number(4);
begin
	DateOut := '&Date_Out';
	DateIn := '&Date_In';
	NoOfDays := DateIn - DateOut;
	if NoOfDays <= 7 then
		Price:=0;
	elsif NoOfDays >= 8 and NoOfDays < 15 then
		Price := NoOfDays * 1;
	elsif NoOfDays >= 16 and NoOfDays < 30 then
		Price := NoOfDays * 2;
	else
		Price := 5;
	end if;
	dbms_output.put_line(Price);
end;
/
4.
declare
	i number(1);
	Out_GPA StudentTable.GPA%type;
begin
	i := 1;
	loop
		select GPA into Out_GPA from StudentTable where ROLLNO = i;
		dbms_output.put_line(Out_GPA);
		i := i + 1;
		if i > 5 then exit;
		end if;
	end loop;
end;
/
5.
alter table StudentTable add (LetterGrade varchar(2));
declare
	i number(1);
	Out_GPA studenttable.GPA%type;
	St_LetterGrade varchar(2);
begin
	i := 1;
	while i < 6
		loop
			select GPA into Out_GPA from StudentTable where rollno=i;
			IF Out_GPA >= 0 and Out_GPA < 4 THEN
				St_LetterGrade := 'F';
			ELSIF Out_GPA >= 4 and Out_GPA < 5 THEN
				St_LetterGrade := 'E';
			ELSIF Out_sGPA >= 5 and Out_GPA < 6 THEN
				St_LetterGrade := 'D';
			ELSIF Out_GPA >= 6 and Out_GPA < 7 THEN
				St_LetterGrade := 'C';
			ELSIF Out_GPA >= 7 and Out_GPA < 8 THEN
				St_LetterGrade := 'B';
			ELSIF Out_GPA >= 8 and Out_GPA < 9 THEN
				St_LetterGrade := 'A';
			ELSIF Out_GPA >= 9 and Out_GPA <= 10 THEN
				St_LetterGrade := 'A+';
			ELSE
				dbms_output.put_line('Grade Not Found!');
			end if;
			update StudentTable set LetterGrade=St_LetterGrade where rollno=i;
			i := i + 1;
		end loop;
		dbms_output.put_line('Updated all Grade Letters');
end;
/
6.
declare
	max_gpa studenttable.GPA%type;
	st_gpa studenttable.GPA%type;
	max_rollno studenttable.rollno%type;
begin
	max_gpa := 0;
	for i in 1..5 loop
		select GPA into st_gpa from StudentTable where RollNo = i;
		if st_gpa > max_gpa then
			max_gpa := st_gpa;
			max_rollno := i;
		end if;
	end loop;
	dbms_output.put_line(max_gpa);
	dbms_output.put_line(max_rollno);
end;
/
7.
create table Product_master(product_no varchar(7),sell_price number(5));
create table Old_price_table(product_no varchar(7),date_change DATE,Old_Price number(5));

declare
	product_id Product_master.product_no%type := 'p00001';
	Today_Date DATE := '27-FEB-2025';
	product_price Product_master.sell_price%type;
begin
	select sell_price into product_price from Product_master where product_no = product_id;
	if(product_price < 4000) then
		update Product_master set sell_price = 4000 where product_no = product_id;
		insert into Old_price_table values(product_id, Today_Date, product_price);
	end IF;
end;
/

8.
declare
	a int;
	b int;
	operator char(1);
	Opeartor_Invalid Exception;
begin
	a := &a;
	b := &b;
	operator := '&operator';
	if(operator not in ('+','-','*','/')) then
		raise Opeartor_Invalid;
	end if;
	if(b = 0 and operator = '/') then
		raise ZERO_DIVIDE;
	end if;
Exception
	when Opeartor_Invalid then
		dbms_output.put_line('Operator Entered Invalid');
	when ZERO_DIVIDE then
		dbms_output.put_line('Zero Division Error!');
end;
/

	


	